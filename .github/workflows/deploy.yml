name: Build and Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-north-1
  ECR_BACKEND_REPO: shipments-backend
  ECR_FRONTEND_REPO: shipments-frontend
  ECS_CLUSTER: arn:aws:ecs:eu-north-1:354918374652:cluster/HappyRobot-ECS
  ECS_SERVICE: arn:aws:ecs:eu-north-1:354918374652:service/HappyRobot-ECS/shipments-taskdef-service-f8gz4zjz
  TASK_DEF_FAMILY: shipments-taskdef
  # Runtime roles used by the ECS task definition (ECS will assume these, not GitHub)
  EXECUTION_ROLE_ARN: arn:aws:iam::354918374652:role/ecsTaskExecutionRole
  TASK_ROLE_ARN: ""   # Optionally set to your app role ARN; leave empty to remove taskRoleArn
  # Container names in your task def
  CONTAINER_BACKEND: backend
  CONTAINER_FRONTEND: frontend

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      backend-image: ${{ steps.build-backend.outputs.backend-image }}
      frontend-image: ${{ steps.build-frontend.outputs.frontend-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC - CI role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build --progress=plain -t $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG ./backend
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          echo "backend-image=$ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -euo pipefail
          docker build --progress=plain -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG ./frontend
          docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          echo "frontend-image=$ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

  deploy:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC - CI role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug - AWS identity
        run: |
          set -euo pipefail
          aws sts get-caller-identity
          aws --version

      - name: ECS resources check
        run: |
          set -euo pipefail
          aws ecs describe-clusters --clusters "${{ env.ECS_CLUSTER }}"
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}"
          aws ecs describe-task-definition --task-definition "${{ env.TASK_DEF_FAMILY }}"

      - name: Download task definition
        run: |
          set -euo pipefail
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_DEF_FAMILY }}" \
            --query taskDefinition > task-definition.json
          cat task-definition.json

      - name: Patch roles in task definition (execution + optional task role)
        run: |
          set -euo pipefail
          # Always set executionRoleArn
          jq --arg exec "${{ env.EXECUTION_ROLE_ARN }}" '.executionRoleArn=$exec' task-definition.json > td1.json
          # If TASK_ROLE_ARN provided, set it; if empty, delete taskRoleArn
          if [ -n "${{ env.TASK_ROLE_ARN }}" ]; then
            jq --arg tr "${{ env.TASK_ROLE_ARN }}" '.taskRoleArn=$tr' td1.json > task-definition.patched.json
          else
            jq 'del(.taskRoleArn)' td1.json > task-definition.patched.json
          fi
          echo "Patched:"
          jq '. | {family, revision, executionRoleArn, taskRoleArn}' task-definition.patched.json

      - name: Render task def (backend)
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.patched.json
          container-name: ${{ env.CONTAINER_BACKEND }}
          image: ${{ needs.build-and-push.outputs.backend-image }}

      - name: Render task def (frontend)
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_FRONTEND }}
          image: ${{ needs.build-and-push.outputs.frontend-image }}

      - name: Validate roles in final task definition
        run: |
          set -euo pipefail
          FINAL="${{ steps.render-frontend.outputs.task-definition }}"
          jq '. | {family, revision, executionRoleArn, taskRoleArn}' "$FINAL"
          execRole=$(jq -r '.executionRoleArn' "$FINAL")
          taskRole=$(jq -r '.taskRoleArn // empty' "$FINAL")
          if echo "$execRole" | grep -q 'GITHUB_deploy'; then
            echo "❌ executionRoleArn still points to GITHUB_deploy"; exit 1
          fi
          if echo "$taskRole" | grep -q 'GITHUB_deploy'; then
            echo "❌ taskRoleArn still points to GITHUB_deploy"; exit 1
          fi
          echo "✅ Roles look good"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Post-deployment check
        run: |
          set -euo pipefail
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}" \
            --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,desiredCount:desiredCount}'
