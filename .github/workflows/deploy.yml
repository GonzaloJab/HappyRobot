name: Build and Deploy to AWS ECS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: eu-north-1
  ECR_BACKEND_REPO: shipments-backend
  ECR_FRONTEND_REPO: shipments-frontend
  ECS_CLUSTER: arn:aws:ecs:eu-north-1:354918374652:cluster/HappyRobot-ECS
  ECS_SERVICE: arn:aws:ecs:eu-north-1:354918374652:service/HappyRobot-ECS/shipments-taskdef-service-f8gz4zjz
  TASK_DEF_FAMILY: shipments-taskdef
  CONTAINER_BACKEND: backend
  CONTAINER_FRONTEND: frontend

jobs:
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    # REQUIRED for OIDC:
    permissions:
      id-token: write
      contents: read

    outputs:
      backend-image: ${{ steps.build-backend.outputs.backend-image }}
      frontend-image: ${{ steps.build-frontend.outputs.frontend-image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push backend image
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üöÄ Starting backend build..."
          echo "Building: $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG"
          
          # Build with verbose output
          docker build --progress=plain -t $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG ./backend
          
          echo "‚úÖ Backend build completed"
          echo "Tagging as latest..."
          docker tag $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          
          echo "üì§ Pushing images..."
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPO:latest
          
          echo "‚úÖ Backend push completed"
          echo "backend-image=$ECR_REGISTRY/$ECR_BACKEND_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Debug - Frontend Build Environment
        run: |
          echo "üîç Debug: Frontend Build Environment"
          echo "ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}"
          echo "ECR_FRONTEND_REPO: ${{ env.ECR_FRONTEND_REPO }}"
          echo "IMAGE_TAG: ${{ github.sha }}"
          echo "Frontend directory contents:"
          ls -la ./frontend/
          echo "Frontend Dockerfile:"
          cat ./frontend/Dockerfile || echo "No Dockerfile found"
          echo "Frontend package.json:"
          cat ./frontend/package.json || echo "No package.json found"

      - name: Build, tag, and push frontend image
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üöÄ Starting frontend build..."
          echo "Building: $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG"
          
          # Build with verbose output
          docker build --progress=plain -t $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG ./frontend
          
          echo "‚úÖ Frontend build completed"
          echo "Tagging as latest..."
          docker tag $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          
          echo "üì§ Pushing images..."
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPO:latest
          
          echo "‚úÖ Frontend push completed"
          echo "frontend-image=$ECR_REGISTRY/$ECR_FRONTEND_REPO:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
  deploy:
    name: Deploy to ECS
    needs: build-and-push  # Commented out since build-and-push is disabled
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    # REQUIRED for OIDC:
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::354918374652:role/GITHUB_deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug - AWS OIDC Authentication
        run: |
          echo "üîç Debug: AWS OIDC Authentication"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          echo "Checking AWS identity..."
          aws sts get-caller-identity
          echo "AWS CLI version:"
          aws --version
          echo "‚úÖ OIDC authentication successful!"

      - name: Debug - Deploy Environment
        run: |
          echo "üîç Debug: Deploy Environment"
          echo "AWS_REGION: ${{ env.AWS_REGION }}"
          echo "ECS_CLUSTER: ${{ env.ECS_CLUSTER }}"
          echo "ECS_SERVICE: ${{ env.ECS_SERVICE }}"
          echo "TASK_DEF_FAMILY: ${{ env.TASK_DEF_FAMILY }}"
          echo "CONTAINER_BACKEND: ${{ env.CONTAINER_BACKEND }}"
          echo "CONTAINER_FRONTEND: ${{ env.CONTAINER_FRONTEND }}"
          echo "Backend image from build: ${{ needs.build-and-push.outputs.backend-image }}"
          echo "Frontend image from build: ${{ needs.build-and-push.outputs.frontend-image }}"

      # You can keep static keys here if you want; or switch this to OIDC too.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Debug - AWS Credentials (Deploy)
        run: |
          echo "üîç Debug: AWS Credentials (Deploy)"
          aws sts get-caller-identity
          echo "AWS CLI version:"
          aws --version

      - name: Debug - ECS Resources Check
        run: |
          echo "üîç Debug: ECS Resources Check"
          echo "Checking ECS cluster..."
          aws ecs describe-clusters --clusters "${{ env.ECS_CLUSTER }}" || echo "‚ùå Cluster not found"
          echo "Checking ECS service..."
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}" || echo "‚ùå Service not found"
          echo "Checking task definition..."
          aws ecs describe-task-definition --task-definition "${{ env.TASK_DEF_FAMILY }}" || echo "‚ùå Task definition not found"

      - name: Download task definition
        run: |
          echo "üì• Downloading task definition..."
          aws ecs describe-task-definition \
            --task-definition "${{ env.TASK_DEF_FAMILY }}" \
            --query taskDefinition > task-definition.json
          echo "‚úÖ Task definition downloaded"
          echo "Task definition contents:"
          cat task-definition.json

      # Render backend image
      - name: Debug - Backend Render Inputs
        run: |
          echo "üîç Debug: Backend Render Inputs"
          echo "Container name: ${{ env.CONTAINER_BACKEND }}"
          echo "Backend image: ${{ needs.build-and-push.outputs.backend-image }}"
          echo "Task definition file exists:"
          ls -la task-definition.json

      - name: Render task def (backend)
        id: render-backend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_BACKEND }}
          image: ${{ needs.build-and-push.outputs.backend-image }}

      - name: Debug - Backend Render Output
        run: |
          echo "üîç Debug: Backend Render Output"
          echo "Rendered task definition:"
          echo "${{ steps.render-backend.outputs.task-definition }}"

      # Render frontend image on top of previous render
      - name: Debug - Frontend Render Inputs
        run: |
          echo "üîç Debug: Frontend Render Inputs"
          echo "Container name: ${{ env.CONTAINER_FRONTEND }}"
          echo "Frontend image: ${{ needs.build-and-push.outputs.frontend-image }}"

      - name: Render task def (frontend)
        id: render-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-backend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_FRONTEND }}
          image: ${{ needs.build-and-push.outputs.frontend-image }}

      - name: Debug - Final Task Definition
        run: |
          echo "üîç Debug: Final Task Definition"
          echo "Final rendered task definition:"
          echo "${{ steps.render-frontend.outputs.task-definition }}"

      - name: Debug - Pre-Deployment Check
        run: |
          echo "üîç Debug: Pre-Deployment Check"
          echo "About to deploy with:"
          echo "  Task definition: ${{ steps.render-frontend.outputs.task-definition }}"
          echo "  Service: ${{ env.ECS_SERVICE }}"
          echo "  Cluster: ${{ env.ECS_CLUSTER }}"
          echo "Current service status:"
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}" --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,desiredCount:desiredCount}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-frontend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Debug - Post-Deployment Check
        run: |
          echo "üîç Debug: Post-Deployment Check"
          echo "Deployment completed. Checking service status..."
          aws ecs describe-services --cluster "${{ env.ECS_CLUSTER }}" --services "${{ env.ECS_SERVICE }}" --query 'services[0].{status:status,runningCount:runningCount,pendingCount:pendingCount,desiredCount:desiredCount,deployments:deployments[0].{status:status,createdAt:createdAt}}'
          echo "Recent task events:"
          aws ecs list-tasks --cluster "${{ env.ECS_CLUSTER }}" --service-name "${{ env.ECS_SERVICE }}" --query 'taskArns[0]' --output text | xargs -I {} aws ecs describe-tasks --cluster "${{ env.ECS_CLUSTER }}" --tasks {} --query 'tasks[0].{lastStatus:lastStatus,desiredStatus:desiredStatus,healthStatus:healthStatus}' || echo "No tasks found"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Deployment completed successfully!"
            echo "Service is running with the new task definition"
          else
            echo "‚ùå Deployment failed!"
            echo "Check the logs above for details"
          fi
